//@author: tmp 
//@help: Displace the given mesh with the depth data of the kinect
//@tags: DX11, Pointcloud, Mesh, Kinect
//@credits: vvvv

//float4x4 tW <string uiname="Transform In";>;

Texture2D texDepth <string uiname="Depth";>;

SamplerState sPoint : IMMUTABLE
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Border;
    AddressV = Border;
};


cbuffer cbPerDraw : register( b0 )
{
	float4x4 tW <string uiname="Transform In";>;
	float4x4 tFilter <string uiname="Transform Filter";>;
	float2 FOV;
	float maxDistance;
};


struct VS_IN
{
	float4 pos : POSITION;
	float3 normal : NORMAL;
	float2 uv : TEXCOORD0;
};

struct VS_OUTPUT
{
	float4 pos : POSITION;
	float3 norm : NORMAL;
	float2 uv : TEXCOORD0;
};

VS_OUTPUT VS(VS_IN input)
{
	VS_OUTPUT o;

	
	float depth =  texDepth.SampleLevel(sPoint,input.uv.xy,0).r * 65.535 ;
	float XtoZ = tan(FOV.x/2) * 2;
    float YtoZ = tan(FOV.y/2) * 2;
	
	float4 pos = float4(0,0,0,1);
	pos.x = ((input.uv.x - 0.5) * depth * XtoZ * -1);
	pos.y = ((0.5 - input.uv.y) * depth * YtoZ);
	pos.z = depth;
	pos = mul(pos, tW);
	
	
	//check if point position is inside the given filter(s)
	float4 pointCoord = mul(pos, tFilter);
	if(	pointCoord.x < -0.5 || pointCoord.x > 0.5 ||
		pointCoord.y < -0.5 || pointCoord.y > 0.5 ||
		pointCoord.z < -0.5 || pointCoord.z > 0.5
		){
			pos.w = 0.0f; // this marks the vertex point as discard and will not be rendered
		}
	else pos.w = 1.0f;
	
	o.pos = pos;
	o.norm = input.normal;
	o.uv=input.uv;
	
    return o;
}

[maxvertexcount(3)]
void GS(triangle VS_OUTPUT input[3], inout TriangleStream<VS_OUTPUT> gsout)
{
	VS_OUTPUT elem = (VS_OUTPUT)0;
	
	// check if the distance between all 3 vertices of the triangle is 
	// below the given threshold
	if( distance(input[0].pos.xyz,input[1].pos.xyz) < maxDistance &&
		distance(input[0].pos.xyz,input[2].pos.xyz) < maxDistance && 
		distance(input[1].pos.xyz,input[2].pos.xyz) < maxDistance &&
		input[0].pos.w != 0 && input[1].pos.w != 0 && input[2].pos.w != 0
		){
			for(int i = 0; i < 3;i++){
				if(input[i].pos.z != 0) gsout.Append(input[i]);
			}
	}
	gsout.RestartStrip();
	
}

GeometryShader gsStreamOut = ConstructGSWithSO(CompileShader(gs_4_0, GS()), "POSITION.xyzw; NORMAL.xyz; TEXCOORD.xy", NULL, NULL, NULL, -1);

technique10 Mesh
{
    pass P0
    {
        SetVertexShader(CompileShader(vs_4_0, VS()));
        SetGeometryShader(gsStreamOut);
    }  
}

